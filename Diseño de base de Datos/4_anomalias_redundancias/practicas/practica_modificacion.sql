-- üìå Pr√°ctica: Correcci√≥n de Problemas de Modificaci√≥n en Bases de Datos
-- Objetivo: Identificar y corregir anomal√≠as de modificaci√≥n aplicando normalizaci√≥n.

-- 1Ô∏è‚É£ Creaci√≥n de una tabla con anomal√≠a de modificaci√≥n (Ejemplo Incorrecto)
CREATE TABLE Productos_Incorrecto (
    id_producto INT PRIMARY KEY,
    nombre VARCHAR(100),
    proveedor VARCHAR(100),
    telefono_proveedor VARCHAR(15)
);

-- Inserci√≥n de datos con redundancia
INSERT INTO Productos_Incorrecto VALUES (1, 'Laptop', 'TechCorp', '555-1234');
INSERT INTO Productos_Incorrecto VALUES (2, 'Mouse', 'TechCorp', '555-1234');
INSERT INTO Productos_Incorrecto VALUES (3, 'Teclado', 'KeyMasters', '555-5678');

-- üî¥ Problema: Si el n√∫mero de tel√©fono de 'TechCorp' cambia, hay que actualizarlo en varias filas.

-- 2Ô∏è‚É£ Normalizaci√≥n: Aplicando 1FN, 2FN y 3FN para corregir la anomal√≠a

-- üîπ Aplicaci√≥n de 1FN (Dividir los datos en entidades √∫nicas sin grupos repetidos)
CREATE TABLE Proveedores (
    id_proveedor INT PRIMARY KEY,
    nombre VARCHAR(100),
    telefono VARCHAR(15)
);

CREATE TABLE Productos (
    id_producto INT PRIMARY KEY,
    nombre VARCHAR(100),
    id_proveedor INT,
    FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor)
);

-- üîπ Aplicaci√≥n de 2FN (Eliminar dependencias parciales)
-- Ahora, los datos del proveedor no dependen del producto.

-- üîπ Aplicaci√≥n de 3FN (Eliminar dependencias transitivas)
-- La informaci√≥n del tel√©fono del proveedor ahora est√° correctamente almacenada.

-- 3Ô∏è‚É£ Insertando datos sin anomal√≠as de modificaci√≥n
INSERT INTO Proveedores VALUES (1, 'TechCorp', '555-1234');
INSERT INTO Proveedores VALUES (2, 'KeyMasters', '555-5678');

INSERT INTO Productos VALUES (1, 'Laptop', 1);
INSERT INTO Productos VALUES (2, 'Mouse', 1);
INSERT INTO Productos VALUES (3, 'Teclado', 2);

-- ‚úÖ Resultado: Ahora, si el n√∫mero de tel√©fono de un proveedor cambia, solo se actualiza en una fila.
